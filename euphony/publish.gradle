apply plugin: 'maven-publish'
apply plugin: 'signing'

def LIB_GROUP_ID = 'co.jbear.lib'
def LIB_ARTIFACT_ID = 'euphony'
def LIB_VERSION = '0.7.1.1'

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/designe/euphony")
            credentials {
                username = System.getenv('GITHUB_USER') ?: project.properties['GITHUB_USER']
                password = System.getenv('GITHUB_PERSONAL_ACCESS_TOKEN') ?: project.properties['GITHUB_PERSONAL_ACCESS_TOKEN']
            }
        }

        maven {
            name = 'CustomMavenRepo'
            url = "file://${buildDir}/repo"
        }
    }
    publications {
        euphony(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version LIB_VERSION
            artifact("$buildDir/outputs/aar/euphony-release.aar")
            artifact(sourceJar)

            pom {
                name = LIB_ARTIFACT_ID
                description = 'Euphony; Acoustic Telecommunication Library'
                url = 'https://github.com/designe/euphony'

                licenses {
                    license {
                        name = 'Apache 2.0 License'
                        url = 'https://github.com/designe/euphony/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'designe'
                        name = 'Ji-woong Choi'
                        email = "designe@outlook.com"
                    }
                }

                scm {
                    connection = 'scm:git:github.com/designe/euphony.git'
                    developerConnection = "scm:git:ssh://github.com/designe.euphony.git"
                    url = 'https://github.com/designe/euphony/tree/main'
                }
            }
         /*
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }*/
        }
    }
}

ext["signing.keyId"] = rootProject.ext["signing.keyId"]
ext["signing.password"] = rootProject.ext["signing.password"]
ext["signing.secretKeyRingFile"] = rootProject.ext["signing.secretKeyRingFile"]

signing {
    sign publishing.publications
}
